/*
void interpolation_example() {
    Z3_context ctx = mk_context();
    Z3_ast pa = mk_bool_var(ctx, "PredA");
    Z3_ast pb = mk_bool_var(ctx, "PredB");
    Z3_ast pc = mk_bool_var(ctx, "PredC");
    Z3_ast args1[2] = {pa,pb}, args2[2] = {Z3_mk_not(ctx,pb),pc};
    Z3_ast args3[2] = {Z3_mk_interpolant(ctx,Z3_mk_and(ctx,2,args1)),Z3_mk_and(ctx,2,args2)};
    Z3_ast f = Z3_mk_and(ctx,2,args3);
    Z3_ast_vector interpolant = 0;
    Z3_model m = 0;
    Z3_lbool result = Z3_L_UNDEF;

    printf("\ninterpolation_example\n");
    LOG_MSG("interpolation_example");

    result = Z3_compute_interpolant(ctx,f,0,&interpolant,&m);

    switch (result) {
    case Z3_L_FALSE:
        printf("unsat\n");
        printf("interpolant: %s\n", Z3_ast_to_string(ctx, Z3_ast_vector_get(ctx, interpolant, 0)));
        printf("\n");
        break;
    case Z3_L_UNDEF:
        printf("unknown\n");
        printf("potential model:\n");
	if (m) Z3_model_inc_ref(ctx, m);
        display_model(ctx, stdout, m);
        break;
    case Z3_L_TRUE:
        printf("sat\n");
	if (m) Z3_model_inc_ref(ctx, m);
        display_model(ctx, stdout, m);
        break;
    }

    //delete logical context 
    if (m) Z3_model_dec_ref(ctx, m);
    Z3_del_context(ctx);
    
    
    
    
    
    
    
    
#include <iostream>
#include <z3++.h>
#include <z3.h>
#include <z3_interp.h>

int main() {
    z3::config cfg;
    cfg.set("PROOF", true);
    cfg.set("MODEL", true);
    z3::context ctx(cfg);
    auto a = ctx.int_const("a");
    auto b = ctx.int_const("b");
    auto c = ctx.int_const("c");
    auto d = ctx.int_const("d");
    auto A = (a == b) && (a == c);
    auto B = (b == d) && (! (c==d) );
    auto A_ = z3::expr(ctx, Z3_mk_interpolant(ctx, A));
    auto param2 = ctx.bool_val(false);
    auto param3 = z3::expr(ctx, A_ && B);
    z3::params param4(ctx);
    //Z3_get_interpolant(ctx, param2, param3, param4);
    Z3_ast_vector * vector = new Z3_ast_vector();
    Z3_model * model = new Z3_model();
    auto result = Z3_compute_interpolant(ctx, A_ && B, param4, vector, model);
    if (result == Z3_L_TRUE) {
        std::cout << "true" << std::endl;
    } else if (result == Z3_L_FALSE) {
        std::cout << "false" << std::endl;
        std::cout << z3::ast_vector(ctx, *vector);
    } else {
        std::cout << "unknown" << std::endl;
    }
    return 0;
}

*/